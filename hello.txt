

### 1. **git init**  
Initializes a new Git repository in the current directory. It creates a `.git` folder to start tracking changes.

### 2. **git clone**  
Copies an existing remote repository to your local machine, creating a local working copy.

### 3. **git status**  
Shows the current state of the working directory and the staging area. It lets you see which files are modified, staged, or untracked.
 
### 4. **git add**  
Moves changes from the working directory to the staging area. This tells Git you want to include updates in the next commit.

### 5. **git commit**  
Records changes from the staging area to the repository. Each commit represents a snapshot of the projectâ€™s changes, with a message describing the update.

### 6. **git push**  
Sends your committed changes from the local repository to a remote repository (like GitHub or GitLab).

### 7. **git pull**  
Fetches changes from a remote repository and merges them into your current branch. It's used to update your local repository with the latest changes.

### 8. **git fetch**  
Downloads changes from a remote repository without merging them. It allows you to review what has been updated before integrating changes into your local branch.

### 9. **git branch**  
Lists, creates, or deletes branches. Branches are separate lines of development within a project.

### 10. **git checkout**  
Switches to a different branch or restores files to a previous state. Commonly used to move between branches.

### 11. **git merge**  
Combines changes from one branch into the current branch, allowing different lines of development to be integrated.

### 12. **git log**  
Displays a history of commits made to the repository, showing information like commit hashes, authors, and commit messages.

### 13. **git reset**  
Reverts the repository to a previous state. It can unstage changes or move the current branch to a different commit, effectively undoing changes.

### 14. **git diff**  
Shows differences between files in the working directory and the staging area or between different commits. Useful for reviewing changes before committing or merging.

### 15. **git rm**  
Removes files from the working directory and stages the deletion for the next commit.

### 16. **git stash**  
Temporarily saves changes that are not yet ready to be committed. This allows you to clean your working directory without committing, and later restore those changes when needed.

These are the core Git commands that will help you manage your source code efficiently.
